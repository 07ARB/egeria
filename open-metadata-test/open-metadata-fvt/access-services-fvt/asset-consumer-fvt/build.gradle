/*
 * SPDX-License-Identifier: Apache-2.0
 * Copyright Contributors to the ODPi Egeria project.
 */

plugins {
    // Include plug-in for starting a new process
    id 'com.github.hesch.execfork'
}

apply plugin: "com.github.hesch.execfork"
apply plugin: 'groovy'


dependencies {
    implementation project(':open-metadata-implementation:access-services:asset-owner:asset-owner-api')
    implementation project(':open-metadata-implementation:access-services:asset-owner:asset-owner-client')
    implementation project(':open-metadata-implementation:access-services:asset-consumer:asset-consumer-api')
    implementation project(':open-metadata-implementation:access-services:asset-consumer:asset-consumer-client')
    implementation project(':open-metadata-implementation:frameworks:audit-log-framework')
    implementation project(':open-metadata-implementation:frameworks:open-connector-framework')
    implementation project(':open-metadata-implementation:repository-services:repository-services-apis')
    implementation project(':open-metadata-implementation:admin-services:admin-services-api')
    implementation project(':open-metadata-implementation:common-services:ffdc-services')
    implementation project(':open-metadata-implementation:common-services:ocf-metadata-management:ocf-metadata-client')
    implementation project(':open-metadata-test:open-metadata-fvt:fvt-utilities')
    testImplementation project(':open-metadata-distribution:open-metadata-assemblies')
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    implementation 'com.fasterxml.jackson.core:jackson-annotations'
    testImplementation("org.junit.jupiter:junit-jupiter-params")
    compile localGroovy()
    implementation project(':open-metadata-implementation:adapters:authentication-plugins:http-helper')

}

description = 'Asset Consumer OMAS FVT'

java {
    withJavadocJar()
}

// Integration testing

// Build the groovy test script
sourceSets.test.java.srcDirs = []
sourceSets.test.groovy.srcDirs = ["src/test/java", "src/test/script"]

// Initially we launch as an app -- though there may be a better way of running this in the existing jvm
task startServer(dependsOn: [':open-metadata-distribution:open-metadata-assemblies:egeriaomagDistTar'], type: com.github.psxpaul.task.ExecFork) {
    // Start some external service
    workingDir = "${rootProject.projectDir}/open-metadata-distribution/open-metadata-assemblies/build/unpacked/egeria-${project.version}-distribution.tar.gz"
    executable = "java"
    args = [ '-Dserver.port=10443','-Dloader.path=lib',
             '-Dspringdoc.api-docs.enabled=false','-jar',"server/server-chassis-spring-${project.version}.jar" ]
    // Setting the output directories to be the same for ALL FVTs acts as a synchronization mechanism
    // - alternatively we need to ensure the server port is unique per test
    //standardOutput = "${rootProject.buildDir}/daemon.log"
    //errorOutput = "${rootProject.buildDir}/daemon-error.log"
    //stopAfter = verify
    waitForPort = 10443
    //waitForOutput = 'has started'
}

task configServer(dependsOn: ['startServer','classes'], type: JavaExec) {
            main = 'configureStartServer'
            classpath = sourceSets.test.runtimeClasspath
            //TODO: These parms aren't currently correctly passed. We rely on defaults in the script
            systemProperties = [
            'name': 'Egeria chassis',
            'baseURL': 'https://localhost:10443',
            'server': 'fvtServer',
            'user': 'fvtUser'
            ]
        }

// Run the tests
task integrationTest(dependsOn: ['configServer'] , type: Test) {
    description 'Run Integration Tests'
    outputs.upToDateWhen {return false}
    useTestNG {
        excludeGroups 'toExclude'
        useDefaultListeners = true
        //reports.html.enabled = false

    }
    //testLogging {
    //    events "PASSED", "FAILED", "SKIPPED"
    //}
    testLogging.showStandardStreams = true

}
//build.finalizedBy integration
check.dependsOn integrationTest
integrationTest.finalizedBy stopServer

